0a1
> 
26c27
<     unsigned int milliseconds;
---
>     
41c42
< 	  kprintf("disp.c Case #: %d\n", r);
---
>       	//kprintf("Syscall was %d\n" , r);
44,48c45,49
< 		ap = (va_list)p->args;
< 		fp = (funcptr)(va_arg( ap, int ) );
< 		stack = va_arg( ap, int );
< 		p->ret = create( fp, stack );
<       break;
---
> 	ap = (va_list)p->args;
> 	fp = (funcptr)(va_arg( ap, int ) );
> 	stack = va_arg( ap, int );
> 	p->ret = create( fp, stack );
> 	break;
50,52c51,53
< 		ready( p );
< 		p = next();
<       break;
---
> 	ready( p );
> 	p = next();
> 	break;
54,57c55,58
< 		p->state = STATE_STOPPED;
< 		kfree((void*)p->stack_top);
< 		p = next();
<       break;
---
> 	p->state = STATE_STOPPED;
> 	kfree((void*)p->stack_top);
> 	p = next();
> 	break;
59,61c60,62
< 		p->ret = p->pid;
< 		p = next();
<       break;
---
> 	p->ret = p->pid;
> 	
> 	break;
63,92c64,76
< 		ap = (va_list)p->args;
< 		str = va_arg(ap,char*);
< 		kprintf( "%s", str );
<       break;
<       case( SYS_SEND ):
< 		ap =(va_list)p->args;
< 		d_pid = va_arg(ap, int);
< 		buffer = va_arg(ap, void*);
< 		buf_len = va_arg(ap, int); 
< 		send_error = send(d_pid, buffer, buf_len,p);
< 			kprintf("Message Sent: %s in disp\n", buffer);
< 		if ( send_error == SEND_ERROR){	
< 			kprintf("Send to process: %d failed\n", d_pid);
< 			
< 			}
< 		else if( send_error == NO_RECV){
< 			kprintf("Process: %d not blocking\n", d_pid);
< 			}
< 		p = next();		
<       break;
<       case( SYS_RECV ):	
< 	    
< 		ap = (va_list)p->args; 
< 		f_pid = va_arg(ap, unsigned int*);
< 		kprintf("disp.sys_recv: PID is: %d\n", f_pid);
< 		buffer = va_arg(ap, void*);
< 		buf_len = va_arg(ap, int); 	
< 		recv_error = recv(f_pid, buffer, buf_len,p);
< 		if(recv_error == INVALID_PID){
< 			kprintf("Process id: %d is invalid\n", *f_pid);
---
>   ap = (va_list)p->args;
> 	str = va_arg(ap,char*);
> 	kprintf( "%s", str );
> 	
> 	break;
> 			case( SYS_SEND ):
> 	ap =(va_list)p->args;
> 	d_pid = va_arg(ap, int);
> 	buffer = va_arg(ap, void*);
> 	buf_len = va_arg(ap, int); 
> 	send_error = send(d_pid, buffer, buf_len,p);
> 	if ( send_error == SEND_ERROR){	
> 		kprintf("Send to process: %d failed\n", d_pid);
94,95c78,79
< 		if(recv_error == PARAM_ERROR){
< 			kprintf("Receive error\n");
---
> 	else if( send_error == NO_RECV){
> 		kprintf("Process: %d not blocking\n", d_pid);
97,111c81,112
< 		p = next();		
<       break;
<       case ( TIMER_INT ) :
< 		kprintf("disp.Timer interupt\n");
< 		ready( p );
< 		p = next();
< 		tick();
< 		end_of_intr();
<       break;
<       case( SYS_SLEEP ):
< 		ap = (va_list)p->args;
< 		milliseconds = va_arg( ap, unsigned int );
< 		sleep( p, milliseconds );
< 		p = next();
<       break;
---
> 		
> 	p = next();		
> 	break;
> 	
> 			case( SYS_RECV ):	
> 			//kprintf("RECV\n");
> 	ap = (va_list)p->args; 
> 	f_pid = va_arg(ap, unsigned int*);
> 	
> 		kprintf("PID is: %d\n", f_pid);
> 	 
> 	buffer = va_arg(ap, void*);
> 	buf_len = va_arg(ap, int); 	
> 	recv_error = recv(f_pid, buffer, buf_len,p);
> 
> 	if(recv_error == INVALID_PID){
> 		kprintf("Process id: %d is invalid\n", *f_pid);
> 	}
> 	if(recv_error == PARAM_ERROR){
> 		kprintf("Receive error\n");
> 	}
> 	p = next();		
> 	break;
> 	
> 			case ( TIMER_INT ) :
> 		//kprintf("timer went off\n");
> 	ready( p );
> 	p = next();
> 	end_of_intr();
> 	break;
> 	
> 		
113c114,116
< 		kprintf( "Bad Sys request %d, pid = %d\n", r, p->pid );
---
>      
> 	kprintf( "Bad Sys request %d, pid = %d\n", r, p->pid ); 
> 	break;
116c119,120
< 	kprintf( "Out of processes: iddle process\n" );
---
> 
> 	kprintf( "Out of processes: idle process\n" );
177d180
< 
